generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String        @id @default(cuid())
  name             String?
  email            String?       @unique
  emailVerified    DateTime?
  image            String?
  password         String?
  resetToken       String?       @unique
  resetTokenExpiry DateTime?
  accounts         Account[]
  chatSessions     ChatSession[]
  sessions         Session[]
  Workspace        Workspace[]

  @@index([email])
  @@index([id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  lastAccessed   DateTime? @default(now())

  name           String
  size           Float
  hasSubfolders  Boolean   @default(false)
  itemType       String    @default("folder")
  image          String?
  
  workspaceId    String
  workspaceName  String
  
  parentFolderId String?
  parentFolder   Folder?   @relation("ParentChild", fields: [parentFolderId], references: [id], onDelete: Cascade)
  
  files          File[]
  subfolders     Folder[]  @relation("ParentChild")
  
  Workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([workspaceId])
}

model File {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  lastAccessed  DateTime? @default(now())
  
  name          String
  size          Float
  type          String
  content       String?
  image         String?
  itemType      String    @default("file")

  folderId      String?
  folderName    String?
  workspaceId   String
  workspaceName String
  
  folder        Folder?   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  Workspace     Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([id])
  @@index([folderId])
  @@index([workspaceId])
}

model Workspace {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  lastAccessed  DateTime? @default(now())

  name          String
  image         String?
  hasSubfolders Boolean   @default(false)
  itemType      String    @default("workspace")
  
  files         File[]
  folders       Folder[]

  user          User      @relation(fields: [userId], references: [id])
  userId        String

  @@index([id])
  @@index([userId])
}

model ChatSession {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  userId    String
  name      String    @default("")
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]

  @@index([id])
  @@index([userId])
}

model Message {
  id            String        @id @default(cuid())
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt
  content       String
  chatSessionId String
  sender        MessageSender
  chatSession   ChatSession   @relation(fields: [chatSessionId], references: [id])

  @@index([id, chatSessionId])
}

enum MessageSender {
  USER
  SYSTEM @map("AGENT")
}
