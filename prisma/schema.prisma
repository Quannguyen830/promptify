// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  chatSessions ChatSession[]
  accounts     Account[]
  sessions     Session[]
  Workspace    Workspace[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// WORKSPACE SYSTEM
model Folder {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name  String
  size  Float
  files File[]

  subfolders     Folder[] @relation("ParentChild")
  parentFolder   Folder?  @relation("ParentChild", fields: [parentFolderId], references: [id])
  parentFolderId String?

  hasSubfolders Boolean @default(false)

  Workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  workspaceName String

  @@index([id])
  @@index([workspaceId])
}

model File {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name String
  size Float
  type String

  folder     Folder? @relation(fields: [folderId], references: [id])
  folderId   String?
  folderName String?

  Workspace     Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  workspaceName String

  @@index([id])
  @@index([folderId])
  @@index([workspaceId])
}

model Workspace {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name    String
  files   File[]
  folders Folder[]

  hasSubfolders Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([id])
  @@index([userId])
}

// CHAT AGENT SYSTEM
model ChatSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name String
  messages Message[]

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@index([id])
  @@index([userId])
}

enum MessageSender {
  USER
  AGENT
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  content String
  sender  MessageSender

  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id])
  chatSessionId String

  @@index([id, chatSessionId])
}
